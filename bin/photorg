#!/usr/bin/python

from photorg import *
import argparse
import logging 


if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Photo organization')
    parser.add_argument('SOURCE', help='directory to source photos')
    parser.add_argument('DEST', help='output directory for organized directories of photos')
    parser.add_argument('-v', '--verbose', action='count', help='verbosity level; -v=warn, -vv=info, -vvv=debug')
    parser.add_argument('--logfile', type=str, help='logging file')
    parser.add_argument('--gap', type=int, default=4, help='The minimum number of days between events (default 4).')
    parser.add_argument('--hardlink', action='store_true', help='hardlink instead of copy')
    parser.add_argument('--delete', action='store_true', help='delete source file after copy')
    parser.add_argument('--rename', action='store_true', help='rename file if destination exists but is different')
    parser.add_argument('--progress', action='store_true', help='show progress')
    args = parser.parse_args()
   
    # set log level
    if args.verbose == 1:
        level = logging.WARN
    elif args.verbose == 2:
        level = logging.INFO
    elif args.verbose >= 3:
        level = logging.DEBUG
    else:
        level = logging.ERROR

    # set log level on root logger or INFO wont display
    logging.getLogger().setLevel(level)
    
    if args.logfile:
        # errors always go to stderr stream
        sh = logging.StreamHandler()
        sh.setFormatter(logging.Formatter('[%(levelname)s] %(message)s'))
        sh.setLevel(logging.ERROR)
        logging.getLogger('').addHandler(sh)
        
        # verbose messages go to log file
        fh = logging.FileHandler(args.logfile)
        fh.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
        fh.setLevel(level)
        logging.getLogger('').addHandler(fh)
    else:
        # errors always go to stderr stream
        sh = logging.StreamHandler()
        sh.setFormatter(logging.Formatter('[%(levelname)s] %(message)s'))
        sh.setLevel(level)
        logging.getLogger('').addHandler(sh)

    logger = logging.getLogger('photorg')

    try:
        # organize and copy files from SOURCE into DEST
        organize_by_event(args.SOURCE, args.DEST, 
                day_delta=args.gap, 
                hardlink=args.hardlink, 
                delete=args.delete, 
                rename=args.rename, 
                progress=args.progress) 
    except Exception as e:
        logger.exception('Unhandled exception')

